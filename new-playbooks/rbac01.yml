-
  name: RBAC FastBind
  hosts: localhost
  collections:
    - netapp.ontap
  vars:
    hostname: 192.168.0.101
    username: admin
    password: Netapp1!
    vserver: svm1_cluster1
    aggr: cluster1_01_SSD_1
    vol_name: photoshop
    ontap_cert_root_common_name: svm1_ca.demo.netapp.local
    ontap_cert_name: svm1_rootca
    win_server_name: dc1.demo.netapp.com
    win_private_key: /etc/ssl/private/{{ win_server_name }}.pem
    win_csr_path: /etc/ssl/csr/{{ win_server_name }}.csr
    bucket_name: svm1-bucket
    service_policy_name: default-data-files
  tasks:
  - name: Create the SSL Private directory
    ansible.builtin.file:
      path: /etc/ssl/private
      state: directory
      mode: '0755'
  - name: Create the SSL CSR directory
    ansible.builtin.file:
      path: /etc/ssl/csr
      state: directory
      mode: '0755'
  - name: Windows Generate an OpenSSL private key with ECC
    community.crypto.openssl_privatekey:
      path: "{{ win_private_key }}"
      type: ECC
      curve: secp256r1
  - name: Windows Generate an OpenSSL Certificate Signing Request
    community.crypto.openssl_csr:
      path: "{{ win_csr_path }}"
      privatekey_path: "{{ win_private_key }}"
      common_name: "{{ win_server_name }}"
      extended_key_usage:
        - serverAuth
      subject_alt_name: "DNS:dc1.demo.netapp.com,IP:192.168.0.253"
  - name: Create root-ca cert
    netapp.ontap.na_ontap_security_certificates:
      common_name: "{{ ontap_cert_root_common_name }}"
      name: "{{ ontap_cert_name }}"
      type: root_ca
      svm: "{{ vserver }}"
      expiry_time: P365DT     # one year
      hostname: "{{ hostname }}"
      username: "{{ username }}"
      password: "{{ password }}"
      use_rest: always
      https: true
      validate_certs: false
  - name: Get RootCA cert from ONTAP
    netapp.ontap.na_ontap_rest_cli:
      hostname: "{{ hostname }}"
      username: "{{ username }}"
      password: "{{ password }}"
      command: 'security/certificate'
      verb: 'GET'
      params: {'vserver': '{{ vserver }}','type':'root-ca','fields':'public-cert','common-name': '{{ ontap_cert_root_common_name }}'}
      validate_certs: false
      https: true
    register: root_ca_cert
  - debug: var=root_ca_cert.msg.records[0].public_cert
  - name: Write ONTAP root CA to local disk
    local_action: copy content="{{ root_ca_cert.msg.records[0].public_cert }}" dest=/etc/ssl/certs/{{ ontap_cert_root_common_name }}.pem
  - debug:  var=signed_cert.ontap_info.public_certificate
  - name: Windows sign certificate using newly create certificate
    tags: sign_request
    netapp.ontap.na_ontap_security_certificates:
      name: "{{ ontap_cert_name }}"
      hostname: "{{ hostname }}"
      username: "{{ username }}"
      password: "{{ password }}"
      type: server
      use_rest: always
      https: true
      validate_certs: false   
      svm: "{{ vserver }}"
      signing_request: "{{ lookup('file', win_csr_path) }}"
      expiry_time: P180DT
    register: win_signed_cert
  - name: Write signed certificate to a file
    local_action: copy content="{{win_signed_cert.ontap_info.public_certificate}}" dest=/etc/ssl/certs/{{ win_server_name }}.pem
  - name: Generate PKCS#12 file to install on Windows
    community.crypto.openssl_pkcs12:
      action: export
      path: /etc/ssl/{{ win_server_name }}.p12
      friendly_name: "{{ win_server_name }}"
      privatekey_path: "{{ win_private_key }}"
      certificate_path: /etc/ssl/certs/{{ win_server_name }}.pem
      other_certificates: /etc/ssl/certs/{{ ontap_cert_root_common_name }}.pem
      #other_certificates: /opt/certs/ca.pem
      # Note that if /opt/certs/ca.pem contains multiple certificates,
      # only the first one will be used. See the other_certificates_parse_all
      # option for changing this behavior.
      state: present
  - name: copy new schema
    netapp.ontap.na_ontap_command:
      hostname: "{{ hostname }}"
      username: "{{ username }}"
      password: "{{ password }}"
      vserver: "{{ vserver }}"
      validate_certs: false
      https: true
      privilege: advanced
      command: ['ldap','client','schema','copy','-schema','MS-AD-BIS','-new-schema-name','demo','-vserver svm1_cluster1']
      #command: ['ldap','client','schema','modify','-schema','demo','-vserver','svm1_cluster1','-uid-attribute','sAMAccountName']
  - name: modify new schema
    netapp.ontap.na_ontap_command:
      hostname: "{{ hostname }}"
      username: "{{ username }}"
      password: "{{ password }}"
      vserver: "{{ vserver }}"
      validate_certs: false
      https: true
      privilege: advanced
      command: ['ldap','client','schema','modify','-schema','demo','-vserver','svm1_cluster1','-uid-attribute','sAMAccountName']
  - name: create and apply ldap client
    netapp.ontap.na_ontap_ldap_client:
      hostname: "{{ hostname }}"
      username: "{{ username }}"
      password: "{{ password }}"
      vserver: "{{ vserver }}"
      base_dn: DC=demo,DC=netapp,DC=com
      bind_dn: CN=Administrator,CN=Users,DC=demo,DC=netapp,DC=com
      bind_password: Netapp1!
      ldap_servers: "192.168.0.253"
      schema: demo
      validate_certs: false
      https: true
  - name: Enable LDAP on SVM
    na_ontap_ldap:
      state: present
      name: "{{ vserver }}"
      hostname: "{{ hostname }}"
      username: "{{ username }}"
      password: "{{ password }}"
      vserver: "{{ vserver }}"
      validate_certs: false
      https: true
  - name: fix nsswitch passwd
    netapp.ontap.na_ontap_name_service_switch:
      hostname: "{{ hostname }}"
      username: "{{ username }}"
      password: "{{ password }}"
      vserver: "{{ vserver }}"
      validate_certs: false
      https: true
      state: present
      database_type: passwd
      sources: files,ldap
  - name: fix nsswitch group
    netapp.ontap.na_ontap_name_service_switch:
      hostname: "{{ hostname }}"
      username: "{{ username }}"
      password: "{{ password }}"
      vserver: "{{ vserver }}"
      validate_certs: false
      https: true
      state: present
      database_type: group
      sources: files,ldap
-
  name: DC CONFIGURE
  hosts: DC1.demo.netapp.com
  collections:
   - microsoft.ad
   - anisble.windows
  vars:
    hostname: 192.168.0.101
    username: DEMO\Administrator
    password: Netapp1!
    win_server_name: dc1.demo.netapp.com
    win_private_key: /etc/ssl/private/{{ win_server_name }}.pem
  tasks:
  - name: Copy cert to Win
    win_copy:
      src: /etc/ssl/{{ win_server_name }}.p12
      dest: "C:\\{{ win_server_name }}.p12"
  - name: Import a certificate
    ansible.windows.win_certificate_store:
      path: "C:\\{{ win_server_name }}.p12"
      store_type: service
      store_location: NTDS
      key_exportable: false
      key_storage: machine
      state: present
  - name: Add Unix attributes to groups
    microsoft.ad.group:
      name: Domain Admins
      scope: global
      attributes:
        set:
          gidNumber: 512
  - name: Do it again
    microsoft.ad.group:
      name: Domain Users
      scope: global
      attributes:
        set:
          gidNumber: 513    
  - name: Create User
    microsoft.ad.user:
      name: dougd
      firstname: Doug
      surname: Dimmadome
      password: "{{ password }}"
      state: present
      groups:
        set:
        - Domain Admins
        - Domain Users
      attributes:
        set:
          uidNumber: 91302
          gidNumber: 91302
